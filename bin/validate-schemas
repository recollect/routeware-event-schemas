#!/bin/bash
# set -x
set -e

# Script to run some validation to show that our schemas are all valid,
# and then make sure the examples for each schema are also valid.

# We use this as a meta-schema to evaluate our schemas. 
# Note: We could probably use a more standard meta-schema one day.
META_SCHEMA=meta-schema.json

# Colors for nicer output
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
ENDCOLOR="\e[0m"


for schema in $(find schemas -type f); do
  name=$(echo $schema |  cut -d/ -f2|cut -d. -f1)
  printf "::notice file=$schema::Validating schema $name\n"
  ERROR="::error file=$schema::"

  ajv validate -s $META_SCHEMA -d $schema --spec draft2020

  printf "=> Checking for 2020-12 schema\n"
  if grep '"$schema": "https://json-schema.org/draft/2020-12/schema"' $schema; then
    printf "${GREEN}  => Using correct schema${ENDCOLOR}\n"
  else
    printf "${ERROR}  => Schema $schema is not using the correct schema\n"
    exit -1
  fi

  printf "=> Checking for matching schema ID\n"
  if grep '"$id": "com.routeware.eventbus.' $schema; then
    printf "${GREEN}  => Using a correct schema ID${ENDCOLOR}\n";
  else
    printf "${ERROR}  => Schema $schema is not using a correct \$id\n"
    exit -1
  fi
  

  printf "=> Schema $name looks OK - checking examples now...\n"

  if [[ ! -d "examples/$name" ]]; then
    printf "${ERROR}=> Schema $name lacks any examples! Please add at least one!\n"
    exit -1
  fi

  examples=$(find examples/$name -type f)
  if [[ "$examples" == "" ]]; then
    printf "${ERROR}=> No examples found for schema $name! Please add at least one!\n"
    exit -1;
  fi

  for eg in $examples; do
    printf "=> Testing example $eg against the $name schema\n";
    ajv validate -s $schema -d $eg --spec draft2020
    printf "  => $eg looks good!\n"
  done

  printf "${GREEN}::notice file=$schema::Schema $name looks good, examples all validate!\n\n"
done

printf "${GREEN}\n\nALL SCHEMAS LOOK GOOD, Nice work team!\n"
